#!/bin/bash -xeu

# ---------------------------------------------------------
# Get operating system
# ---------------------------------------------------------
{{- $platform := "" -}}
{{ if eq .chezmoi.os "linux" -}}
    {{ if eq .chezmoi.osRelease.id "ubuntu" -}}
        {{- $platform = "ubuntu" -}}
    {{ else if eq .chezmoi.osRelease.id "arch" -}}
        {{- $platform = "arch" -}}
    {{ else if eq .chezmoi.osRelease.id "manjaro" -}}
        {{- $platform = "manjaro" -}}
    {{ end -}}
{{ else if eq .chezmoi.os "darwin" -}}
    {{- $platform = "darwin" -}}
{{- end -}}

{{if eq $platform "" -}}
    # if platform is empty, raise error.
    echo "Operating System is UNKNOWN!"
    return 1
{{- end}}

echo "Operating System is {{$platform}}"

{{if eq $platform "arch" -}}
# ---------------------------------------------------------
# Set Mirror Server for ArchLinux
# ---------------------------------------------------------
    echo "Setting arch mirror servers"
    mkdir -p ~/.cache
    sudo pacman -Sy -q --noconfirm reflector
    sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    sudo reflector --country "Japan,Australia,Taiwan" --latest 5 --completion-percent 95 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
{{end -}}

{{if eq $platform "manjaro" -}}
# ---------------------------------------------------------
# Set Mirror Server for Manjaro
# ---------------------------------------------------------
    mkdir -p ~/.cache
    sudo pacman-mirrors --fasttrack
{{end -}}

{{if or (eq $platform "arch") (eq $platform "manjaro") -}}
# ---------------------------------------------------------
# Setup Pacman
# ---------------------------------------------------------
    # Update
    sudo pacman -Syyu -q --noconfirm

    # Change dir names to English
    sudo pacman -Sy -q xdg-user-dirs-gtk --noconfirm
    LANG=C xdg-user-dirs-gtk-update --noconfirm

    # Install applications
    sudo pacman -Sy -q --noconfirm \
        base-devel \
        bat \
        chezmoi \
        cmake \
        curl \
        exa \
        fd \
        fzf \
        gcc \
        git \
        gtk2 \
        neovim \
        npm \
        openssl \
        ripgrep \
        sheldon \
        openssh \
        ufw \
        unzip \
        wezterm \
        xclip \
        zsh
{{end -}}

{{ if eq $platform "ubuntu" -}}
# ---------------------------------------------------------
# Install apps for Ubuntu
# ---------------------------------------------------------
    sudo apt update -qq && sudo apt upgrade -y -qq && \
    sudo apt install -y -qq \
    build-essential \
    curl \
    file \
    git \
    language-pack-ja \
    libbz2-dev \
    libffi-dev \
    liblzma-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    libxmlsec1-dev \
    llvm \
    make \
    procps \
    tk-dev \
    wget \
    xclip \
    xz-utils \
    zlib1g-dev \
    zsh && \
    sudo apt autoclean -qq
{{end -}}

{{ if or (eq $platform "darwin") (eq $platform "ubuntu") -}}
# ---------------------------------------------------------
# Install Homebrew adn Apps
# ---------------------------------------------------------
# Check Homebrew
    if ! (type "brew" > /dev/null 2>&1); then
        # Install Homebrew
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Activate Homebrew path
        if [[ -d "/home/linuxbrew/.linuxbrew" ]]
        then
            HOMEBREW_HOME="/home/linuxbrew/.linuxbrew"
        elif [[ -d "/opt/homebrew" ]]
        then
            HOMEBREW_HOME="/opt/homebrew"
        else
            HOMEBREW_HOME="/usr/local"
        fi
        eval "$($HOMEBREW_HOME/bin/brew shellenv)"
    fi
# Install Apps
    brew install -q \
        chezmoi \
        sheldon \
        bat \
        deno \
        exa \
        fd \
        fzf \
        nodejs \
        ripgrep \
        neovim
{{end -}}

{{ if eq $platform "darwin" -}}
# ---------------------------------------------------------
# Install Apps for Mac
# ---------------------------------------------------------
    brew tap homebrew/cask-fonts
    brew install -q --cask font-hack-nerd-font
    brew install -q openssl readline sqlite3 xz zlib tcl-tk trash-cli
{{end -}}

# ---------------------------------------------------------
# Install rye, cargo, volta
# ---------------------------------------------------------

# Install rye
curl -sSf https://rye-up.com/get | RYE_INSTALL_OPTION="--yes" bash

# Install Rust
if ! (type "cargo" > /dev/null 2>&1); then
    curl --proto '=https' --tlsv1.2 https://sh.rustup.rs > rustup.sh
    sh rustup.sh -y -q --no-modify-path && rm rustup.sh
    source "$HOME/.cargo/env"
fi

# Install Rust Apps
cargo install -q cargo-update

{{ if eq .chezmoi.os "linux" -}}
# Install trashy (Linux only)
    cargo install -q trashy
{{end -}}

# Install volta
if ! (type "volta" > /dev/null 2>&1); then
    curl https://get.volta.sh | bash
fi

# Neovim Sync Plugins
# nvim --headless "+Lazy! sync" +qa

# Install AstroNvim
rm -rf ~/.config/nvim ~/.local/share/nvim ~/.local/state/nvim ~/.cache/nvim
git clone --depth 1 https://github.com/AstroNvim/AstroNvim ~/.config/nvim
cp -r ~/.local/share/chezmoi/dot_config/nvim/lua/user ~/.config/nvim/lua/
nvim --headless +qa

# Create XDG folder
mkdir -p ~/.local/state

# Delete ~/bin/chezmoi
if [ -f "$HOME/bin/chezmoi" ]; then
    echo "Removing ~/bin/chezmoi"
    rm "$HOME/bin/chezmoi"
fi
if [ -d "$HOME/bin" ]; then
    if [ -z "$(ls -A $HOME/bin)" ]; then
        echo "Removing ~/bin"
        rmdir "$HOME/bin"
    fi
fi
