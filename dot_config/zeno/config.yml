snippets:
  # snippet and keyword abbrev
  - name: git status
    keyword: gs
    snippet: git status --short --branch
  - name: git add
    keyword: ga
    snippet: git add
  # snippet with placeholder
  - name: git commit message
    keyword: gcm
    snippet: git commit -m '{{commit_message}}'
  - name: "null"
    keyword: "null"
    snippet: ">/dev/null 2>&1"
    # auto expand condition
    # If not defined, it is only valid at the beginning of a line.
    context:
      # buffer: ''
      lbuffer: '.+\s'
      # rbuffer: ''
  - name: branch
    keyword: B
    snippet: git symbolic-ref --short HEAD
    context:
      lbuffer: '^git\s+checkout\s+'
    evaluate: true # eval snippet
  # github-cli
  - name: gh repo create & clone
    keyword: ghcr
    snippet: (){gh repo create $argv && gh q get $argv[1] && cd ~/ghq/github.com/$argv[1]}
  - name: gh pr create & merge
    keyword: gpcm
    snippet: gh pr create && sleep 3 && gh pr checks --watch && gh pr merge -m -d && git fetch -p
  # chezmoi
  - name: chezmoi update
    keyword: cup
    snippet: chezmoi update -v
  - name: chezmoi apply
    keyword: ca
    snippet: chezmoi apply -v
  - name: chezmoi edit
    keyword: ce
    snippet: chezmoi edit
  - name: chezmoi cd
    keyword: ccd
    snippet: cd $(chezmoi source-path)
  # docker
  - name: docker container ls
    keyword: dcl
    snippet: docker container ls
  - name: docker container prune
    keyword: dcp
    snippet: docker container prune
  - name: docker stop all
    keyword: dsall
    snippet: docker stop $(docker ps -q)
  - name: docker rm
    keyword: drm
    snippet: docker rm
  - name: docker rm all
    keyword: drmall
    snippet: docker rm $(docker ps -a -q)
  - name: docker images
    keyword: di
    snippet: docker images
  - name: docker images prune
    keyword: dip
    snippet: docker images prune
  - name: docker compose up
    keyword: dcu
    snippet: docker compose up
  - name: docker compose up -d
    keyword: dcud
    snippet: docker compose up -d
  - name: docker compose down
    keyword: dcd
    snippet: docker compose down
  # lazygit
  - name: lazygit
    keyword: lg
    snippet: lazygit
  # ls(exa)
  - name: la
    keyword: la
    snippet: ls -a
  - name: ll
    keyword: ll
    snippet: ls-alh
  - name: lt
    keyword: lt
    snippet: ls -a -T -L 3 -I '.git'
  - name: llt
    keyword: llt
    snippet: ls -alh -T -L 3 -I '.git'
  # neovim
  - name: neovim
    keyword: v
    snippet: nvim
  # Cargo-compete
  - name: compete new
    keyword: ccn
    snippet: (){cargo compete new $1 && cargo member i $1 && git add -A && git commit -m "Add $1" && cd $1}
  - name: compete test
    keyword: cct
    snippet: cargo compete test
  - name: compete submit
    keyword: ccs
    snippet: (){cargo compete test $1 && cat src/bin/$1.rs | C && echo "Copied $1.rs to clipboard"}
  # Wezterm
  - name: wezterm connect
    keyword: wc
    snippet: wezterm connect
completions:
  # simple sourceCommand, no callback
  - name: kill signal
    patterns:
      - "^kill -s $"
    sourceCommand: "kill -l | tr ' ' '\\n'"
    options:
      --prompt: "'Kill Signal> '"
  # use excludePatterns and callback
  - name: kill pid
    patterns:
      - "^kill( .*)? $"
    excludePatterns:
      # -l, -n or -s is followed by SIGNAL instead of PID
      - " -[lns] $"
    sourceCommand: "LANG=C ps -ef | sed 1d"
    options:
      --multi: true
      --prompt: "'Kill Process> '"
    callback: "awk '{print $2}'"
  # Use null (\0) termination Input / Output
  - name: chdir
    patterns:
      - "^cd $"
    sourceCommand: "find . -path '*/.git' -prune -o -maxdepth 5 -type d -print0"
    options:
      # Added --read0 if null termination is used in `sourceCommand` output.
      --read0: true
      --prompt: "'Chdir> '"
      --preview: "cd {} && ls -a | sed '/^[.]*$/d'"
    callback: "cut -z -c 3-"
    callbackZero: true # null termination is used in `callback` I/O
